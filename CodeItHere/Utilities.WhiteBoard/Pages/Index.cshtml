@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}


<div id="canvasWrapper" style="height: calc(100vh - 140px)">
    <canvas id="canvas"> </canvas>
</div>
@Html.Hidden("hdnBoard", Model.Board)
@section Scripts{

    <script src="~/lib/JSketch.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.3/signalr.min.js"></script>

    <script>

        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/whiteboard")
            .configureLogging(signalR.LogLevel.Error)
            .build();

        connection.start().then(() => {
            console.log('connected to RTC');
            connection.invoke('JoinGroup', '@Model.Board').then(() => { console.log('Joined to group : @Model.Board');})
        }
        ).catch(er => console.error(er));





    </script>

    <script>
        var canvas = $('#canvas');
        let canvasWrapper = $('#canvasWrapper');
        var ctx = canvas[0].getContext('2d');
        ctx.canvas.width = canvasWrapper.width();
        ctx.canvas.height = canvasWrapper.height();
        var video = $('#video')[0];
        var id = 0;
        var recorder, stream, sourceBuffer, contents;
        var chunks = [];
        var id = 0, currentId = 0, waitTime = 0;
        var showMovement = $('#btnShowMovement').data('movement') === 'true';

        var options = {
            graphics: {
                lineWidth: 3,
                strokeStyle: 'grey',
            },
            events: {
                mousedown: function (elem, data, evt) {
                    //SendData();
                },
                mouseup: function (elem, data, evt) {
                    SendData();
                },
                mousemove: function (elem, data, evt) {
                    showMovement && SendData();
                },
                mousedownBefore: function (elem, data, evt) {
                    var brushType = $('#btnBrushType').data('brush');
                    if (brushType == 'eraser') {
                        // There is a method to set the brush in eraser mode.
                        data.options.graphics.lineWidth = 20;
                        data.sketch.eraser();
                    } else if (brushType == 'pencil') {
                        // There is a method to get the default mode (pencil) back.
                        data.options.graphics.lineWidth = 3;
                        data.sketch.pencil();
                    }
                }
            }
        };

        var sketcher = canvas.sketchable(options);

        function SendData(cmd='change') {
            contents = sketcher.sketchable('serializer.save');

            //var content = JSON.stringify(contents);
            var content = canvas[0].toDataURL();
            connection.invoke('Change', { Id: id, Array: content, Board:"@Model.Board",Command:cmd })
                .then(function () {
                    console.log('send', id);
                    id = id + 1;
                })
                .catch(err => console.error(err));
        }

        connection.on('change', function (data) {
            console.log('recieved', data.id);
            if (data.id > currentId || data.id == 0) {
                //sketcher.sketchable('serializer.load', JSON.parse(data.array));
                if (data.command === 'clear')
                {
                    sketcher.sketchable('clear');
                }
                else
                {
                    var imageObj = new Image();
                    imageObj.onload = function () {
                        drawImageScaled(this, ctx);
                        //ctx.drawImage(this, 0, 0,this.width,this.height,0,0,canvas.width,canvas.height);
                    };

                    imageObj.src = data.array;
                    currentId = data.id;
                }
            }
        })
        function drawImageScaled(img, ctx) {
            var canvas = ctx.canvas;
            var hRatio = canvas.width / img.width;
            var vRatio = canvas.height / img.height;
            var ratio = Math.min(hRatio, vRatio);
            var centerShift_x = (canvas.width - img.width * ratio) / 2;
            var centerShift_y = (canvas.height - img.height * ratio) / 2;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(img, 0, 0, img.width, img.height,
                centerShift_x, centerShift_y, img.width * ratio, img.height * ratio);
        }
        $('#btnClear').click(function () {
            sketcher.sketchable('clear');
            SendData('clear');
        });

        $('#btnShowMovement').click(function () {
            if ($(this).data('movement') === 'true')
            {
                showMovement = false;
                $(this).data('movement', 'false');
                $(this).text('Show movements')
            }
            else
            {
                showMovement = true;
                $(this).data('movement', 'true');
                $(this).text('Do not show movements')
            }
        });

        $('#btnBrushType').click(function () {
            if ($(this).data('brush') === 'pencil') {
                $(this).data('brush', 'eraser');
                $(this).text('Pencil');
            }
            else {
                $(this).data('brush', 'pencil');
                $(this).text('Eraser')
            }
        })

        $('#btnFullScreen').click(function () {

            if (!document.fullscreenElement) {
                document.body.requestFullscreen();
                $(this).text('Exit fullscreen');
            }
            else {
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                    $(this).text('Fullscreen');
                }
            }
        });

        $(window).resize(function () {
            var content = canvas[0].toDataURL();

            ctx.canvas.width = canvasWrapper.width();
            ctx.canvas.height = canvasWrapper.height();

            var imageObj = new Image();
            imageObj.onload = function () {
                ctx.drawImage(this, 0, 0);
            };

            imageObj.src = content;
        });

    </script>
}


